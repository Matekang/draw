@using System.Security.Claims
@using Microsoft.AspNetCore.Identity

@inject UserManager<AppUser> userManager


@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var user = await userManager.GetUserAsync(User);
    var name = @user.Name;
    var userClass = @user.Class;
    Layout = null;
}
<!DOCTYPE html>
<html class="no-js">

<head>
    <meta charset="utf-8">
    <title>Các chủ đề</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/templatemo_main.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <style>
        body {
            background-image: url('/images/background/background1.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }

        .canvas-container {
            margin: 20px auto;
            border: 2px solid #ccc;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        #control-panel {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 15px;
            padding: 15px;
            background-color: #3c3c3c;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            width: 100%;
        }

            #control-panel button,
            #control-panel select,
            #control-panel input[type="color"] {
                padding: 10px;
                font-size: 14px;
                border-radius: 5px;
                border: none;
                cursor: pointer;
            }

            #control-panel button {
                background-color: #4caf50;
                color: white;
                transition: all 0.3s ease;
            }

                #control-panel button:hover {
                    background-color: #45a049;
                }

        #drawingCanvas {
            border: 1px solid #ccc;
            cursor: crosshair;
        }

        .canvas-container {
            margin: 20px auto;
            border: 2px solid #ccc;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .canvas-wrapper {
            display: flex;
            justify-content: center;
            position: relative;
            width: 100%;
        }

        #control-panel {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 15px;
            padding: 15px;
            background-color: #3c3c3c;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 10;
            width: 100%;
            max-width: 800px;
        }

            #control-panel button {
                padding: 10px 20px;
                font-size: 16px;
                border-radius: 50px;
                background-color: #4CAF50;
                color: white;
                border: none;
                cursor: pointer;
                transition: all 0.3s ease;
            }

                #control-panel button:hover {
                    background-color: #45a049;
                }

        #brush-type, #brush-size {
            padding: 10px;
            font-size: 14px;
            border-radius: 10px;
            border: 1px solid #ccc;
            background-color: white;
            color: #333;
        }

        #color-picker {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .color-box {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
        }

        label {
            color: white;
            font-size: 14px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="canvas-wrapper">
            <canvas id="drawingCanvas" width="1000" height="800"></canvas>
        </div>
        <div id="control-panel">
            <button id="toggle-drawing">Bật/Tắt chế độ vẽ</button>

            <label for="brush-type">Chọn loại bút:</label>
            <select id="brush-type">
                <option value="pencil" selected>Bút chì</option>
                <option value="spray">Bút phun</option>
            </select>

            <label for="brush-size">Chọn kích thước bút:</label>
            <select id="brush-size">
                <option value="5">Nhỏ</option>
                <option value="10" selected>Vừa</option>
                <option value="20">Lớn</option>
            </select>

            <label>Chọn màu:</label>
            <div id="color-picker">
                <div class="color-box" style="background-color: pink;" data-color="pink"></div>
                <div class="color-box" style="background-color: red;" data-color="red"></div>
                <div class="color-box" style="background-color: orange;" data-color="orange"></div>
                <div class="color-box" style="background-color: yellow;" data-color="yellow"></div>
                <div class="color-box" style="background-color: navy;" data-color="navy"></div>
                <div class="color-box" style="background-color: purple;" data-color="purple"></div>
                <div class="color-box" style="background-color: deepskyblue;" data-color="deepskyblue"></div>
                <div class="color-box" style="background-color: lawngreen;" data-color="lawngreen"></div>
                <div class="color-box" style="background-color: black;" data-color="black"></div>
                <div class="color-box" style="background-color: brown;" data-color="brown"></div>
                <div class="color-box" style="background-color: grey;" data-color="grey"></div>
                <div class="color-box" style="background-color: white;" data-color="white"></div>
            </div>
            <button id="draw-line">Vẽ đường thẳng</button>
            <button id="eraser">Tẩy</button>
            <button id="clear-canvas">Xóa</button>
            <button id="save-image">Lưu tác phẩm</button>
            <button id="image-library">Trưng bày tác phẩm</button>
        </div>
    </div>

    <script>
        const canvas = new fabric.Canvas('drawingCanvas', {
            backgroundColor: 'white'
        });

        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width = 10;

        const colorBoxes = document.querySelectorAll('.color-box');
        colorBoxes.forEach(box => {
            box.addEventListener('click', () => {
                const color = box.getAttribute('data-color');
                canvas.freeDrawingBrush.color = color;

                colorBoxes.forEach(box => box.classList.remove('active'));
                box.classList.add('active');
            });
        });

        const brushSizeSelect = document.getElementById('brush-size');
        brushSizeSelect.addEventListener('change', (event) => {
            canvas.freeDrawingBrush.width = parseInt(event.target.value, 10);
        });

        const clearButton = document.getElementById('clear-canvas');
        clearButton.addEventListener('click', () => {
            canvas.clear();
            canvas.setBackgroundColor('white', canvas.renderAll.bind(canvas));
        });

        // Variables
        let isErasing = false;
        let selectedColor = 'white';

        canvas.isDrawingMode = true;
        // Xóa sự kiện cho nút bật/tắt chế độ vẽ
        const toggleButton = document.getElementById('toggle-drawing');
        toggleButton.style.display = 'none';
        // // Toggle Drawing Mode
        // const toggleButton = document.getElementById('toggle-drawing');
        // toggleButton.addEventListener('click', () => {
        //     canvas.isDrawingMode = !canvas.isDrawingMode;
        //     toggleButton.textContent = canvas.isDrawingMode ? 'Tắt chế độ vẽ' : 'Bật chế độ vẽ';
        // });

        // Enable Eraser
        const eraserButton = document.getElementById('eraser');
        eraserButton.addEventListener('click', () => {
            isErasing = !isErasing;
            console.log("isErasing: "+isErasing);
            if (isErasing) {
                canvas.freeDrawingBrush.color = 'white'; // Set eraser to white
                canvas.defaultCursor = 'crosshair';
                canvas.isDrawingMode = true;
            }
            else {
                canvas.defaultCursor = 'crosshair';
                canvas.freeDrawingBrush.color = selectedColor; // Restore brush color
            }
        });

        // Fill Color Picker
        const colorPicker = document.getElementById('color-picker');
        colorPicker.addEventListener('input', (event) => {
            selectedColor = event.target.value;
            if (!isErasing) {
                canvas.freeDrawingBrush.color = selectedColor;
            }
        });

    </script>
    <script>
            document.getElementById('save-image').addEventListener('click', () => {
                const canvasData = canvas.toDataURL('image/jpg');
                    fetch('/api/ImagesApi/save-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                body: JSON.stringify({ imageData: canvasData, userId: "@userId", status: true, name: "@name", class: "@userClass" })
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert('Hình ảnh đã được lưu thành công');
                    })
                    .catch(error => {
                        console.error('Lỗi khi lưu hình ảnh:', error);
                        alert('Có lỗi xảy ra');
                    });
        });
    </script>
    <script>
            document.getElementById('image-library').addEventListener('click', () => {

            const isConfirmed = window.confirm("Em có muốn trưng bày tác phẩm của mình không?");

            if(isConfirmed){
                const canvasData = canvas.toDataURL('image/jpg');
                    fetch('/api/ImagesApi/image-library', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    body: JSON.stringify({ imageData: canvasData, userId: "@userId", status: true, name: "@name", class: "@userClass" })
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert('Hình ảnh đã được lưu thành công');
                    })
                    .catch(error => {
                        console.error('Lỗi khi lưu hình ảnh:', error);
                        alert('Có lỗi xảy ra');
                    });
            }else{

            }
        });
    </script>
    <script>
        let isDrawingLine = false; // Biến để kiểm tra trạng thái vẽ đường thẳng
        let line, startX, startY;

        const drawLineButton = document.getElementById('draw-line');

                drawLineButton.addEventListener('click', () => {
            isDrawingLine = !isDrawingLine;

            if (isDrawingLine) {
                canvas.isDrawingMode = false;
                drawLineButton.textContent = "Thoát chế độ vẽ đường thẳng";
            } else {
                canvas.isDrawingMode = true;
                drawLineButton.textContent = "Vẽ đường thẳng";
            }
        });

        canvas.on('mouse:down', (event) => {
            if (isDrawingLine) {
                const pointer = canvas.getPointer(event.e);
                startX = pointer.x;
                startY = pointer.y;

                // Tạo đường thẳng tạm thời
                line = new fabric.Line([startX, startY, startX, startY], {
                    stroke: canvas.freeDrawingBrush.color || 'black', // Màu vẽ
                    strokeWidth: canvas.freeDrawingBrush.width || 5, // Độ dày
                    selectable: false, // Không cho phép chọn
                });
                canvas.add(line);
            }
        });

        canvas.on('mouse:move', (event) => {
            if (isDrawingLine && line) {
                const pointer = canvas.getPointer(event.e);
                line.set({ x2: pointer.x, y2: pointer.y }); // Cập nhật điểm cuối
                canvas.renderAll();
            }
        });

        canvas.on('mouse:up', () => {
            if (isDrawingLine && line) {
                line.setCoords(); // Cập nhật tọa độ sau khi vẽ xong
                line = null; // Đặt lại biến
            }
        });

    </script>
</body>

</html>
