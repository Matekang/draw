@using System.Security.Claims
@using Microsoft.AspNetCore.Identity

@inject UserManager<AppUser> userManager

@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var user = await userManager.GetUserAsync(User);
    var name = @user.Name;
    var userClass = @user.Class;
    Layout = null;
}
<!DOCTYPE html>
<html class="no-js">

<head>
    <meta charset="utf-8">
    <title>Các chủ đề</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <style>
        body {
            background-image: url('/images/background/background1.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 1200px;
            padding: 15px;
            box-sizing: border-box;
            gap: 20px;
        }

        .canvas-wrapper {
            display: flex;
            justify-content: center;
            width: 100%;
            overflow-x: auto; /* Thêm thanh cuộn ngang khi cần */
            padding: 10px 0;
        }

        #drawingCanvas {
            width: 1000px; /* Chiều rộng cố định của canvas */
            height: auto; /* Tự động điều chỉnh chiều cao */
            border: 2px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background-color: white;
            cursor: crosshair;
        }

        #control-panel {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            padding: 15px;
            background-color: #3c3c3c;
            border-radius: 10px;
            max-width: 800px;
            width: 100%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

            #control-panel button,
            #control-panel select,
            #control-panel input[type="color"] {
                padding: 10px;
                font-size: 14px;
                border-radius: 5px;
                border: none;
                cursor: pointer;
            }

            #control-panel button {
                background-color: #4caf50;
                color: white;
                transition: all 0.3s ease;
            }

                #control-panel button:hover {
                    background-color: #45a049;
                }

        #color-picker {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .color-box {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
        }

        label {
            color: white;
            font-size: 14px;
        }

        /* Thanh cuộn ngang cho content-box */
        #content-box {
            width: 100%;
            overflow-x: auto; /* Thêm thanh cuộn ngang nếu nội dung vượt quá chiều rộng */
            margin-bottom: 10px;
        }

        #content-display {
            display: inline-block;
            padding: 10px;
            background-color: white;
            color: black;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 100%;
        }

        /* Thanh cuộn ngang dưới canvas */
        .canvas-scroll-wrapper {
            width: 100%;
            overflow-x: auto; /* Cho phép cuộn ngang */
            padding: 10px 0;
            margin-top: 10px;
        }

            /* Thanh cuộn ngang */
            .canvas-scroll-wrapper::-webkit-scrollbar {
                height: 12px; /* Điều chỉnh độ cao của thanh cuộn */
            }

            .canvas-scroll-wrapper::-webkit-scrollbar-thumb {
                background-color: #888;
                border-radius: 6px;
            }

                .canvas-scroll-wrapper::-webkit-scrollbar-thumb:hover {
                    background-color: #555;
                }

        /* Responsive styles for smaller screens */
        @@media (max-width: 768px) {
            #drawingCanvas

        {
            width: 90%; /* Canvas chiếm gần hết chiều rộng màn hình */
            max-width: 1000px;
        }

        #control-panel {
            flex-direction: column;
            gap: 10px;
        }

            #control-panel button {
                padding: 8px 12px;
                font-size: 12px;
            }

        }

        @@media (max-width: 480px) {
            #drawingCanvas

        {
            width: 100%; /* Canvas tự động giãn tối đa */
        }

        #control-panel button {
            font-size: 10px;
            padding: 6px 10px;
        }

        .color-box {
            width: 25px;
            height: 25px;
        }

        }
    </style>
</head>

<body>
    <div class="container">
        <div id="content-box">
            <pre id="content-display">
                @ViewBag.Content
            </pre>
        </div>

        <div class="canvas-scroll-wrapper">
            <div class="canvas-wrapper">
                <canvas id="drawingCanvas" width="1000" height="800"></canvas>
            </div>
        </div>

        <div id="control-panel">
            <button id="toggle-drawing">Bật/Tắt chế độ vẽ</button>
            <label for="brush-type">Chọn loại bút:</label>
            <select id="brush-type">
                <option value="pencil" selected>Bút chì</option>
                <option value="spray">Bút phun</option>
            </select>
            <label for="brush-size">Chọn kích thước bút:</label>
            <select id="brush-size">
                <option value="5">Nhỏ</option>
                <option value="10" selected>Vừa</option>
                <option value="20">Lớn</option>
            </select>
            <input type="range" id="brush-opacity" min="-10" max="10" step="1" value="0">
            <div id="color-picker">
                <div class="color-box" style="background-color: rgb(255, 0, 0);" data-color="rgb(255, 0, 0)"></div>
                <div class="color-box" style="background-color: rgb(255, 165, 0);" data-color="rgb(255, 165, 0)"></div>
                <div class="color-box" style="background-color: rgb(255, 255, 0);" data-color="rgb(255, 255, 0)"></div>
                <div class="color-box" style="background-color: rgb(0, 128, 0);" data-color="rgb(0, 128, 0)"></div>
                <div class="color-box" style="background-color: rgb(0, 0, 255);" data-color="rgb(0, 0, 255)"></div>
                <div class="color-box" style="background-color: rgb(128, 0, 128);" data-color="rgb(128, 0, 128)"></div>
                <div class="color-box" style="background-color: rgb(255, 192, 203);" data-color="rgb(255, 192, 203)"></div>
                <div class="color-box" style="background-color: rgb(165, 42, 42);" data-color="rgb(165, 42, 42)"></div>
                <div class="color-box" style="background-color: rgb(0, 0, 0);" data-color="rgb(0, 0, 0)"></div>
                <div class="color-box" style="background-color: rgb(255, 255, 255);" data-color="rgb(255, 255, 255)"></div>
                <div class="color-box" style="background-color: rgb(128, 128, 128);" data-color="rgb(128, 128, 128)"></div>
                <div class="color-box" style="background-color: rgb(135, 206, 235);" data-color="rgb(135, 206, 235)"></div>
                <div class="color-box" style="background-color: rgb(144, 238, 144);" data-color="rgb(144, 238, 144)"></div>
                <div class="color-box" style="background-color: rgb(255, 255, 224);" data-color="rgb(255, 255, 224)"></div>
                <div class="color-box" style="background-color: rgb(255, 228, 181);" data-color="rgb(255, 228, 181)"></div>
                <div class="color-box" style="background-color: rgb(255, 182, 193);" data-color="rgb(255, 182, 193)"></div>
                <div class="color-box" style="background-color: rgb(216, 191, 216);" data-color="rgb(216, 191, 216)"></div>
                <div class="color-box" style="background-color: rgb(210, 180, 140);" data-color="rgb(210, 180, 140)"></div>
            </div>
            <button id="draw-line">Vẽ đường thẳng</button>
            <button id="undo">⟲</button>
            @* <button id="redo">⟳</button> *@
            <button id="eraser">Tẩy</button>
            <button id="save-image">Lưu tác phẩm</button>
            <button id="image-library">Trưng bày tác phẩm</button>
        </div>
    </div>
    <script>
        const canvas = new fabric.Canvas('drawingCanvas', {
            backgroundColor: 'white'
        });

        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width = 10;
        canvas.freeDrawingBrush.opacity = 0.3;  // Độ mờ của nét vẽ, giống như hiệu ứng màu nước

        let selectedColor = 'rgb(255, 255, 255)';


        const colorBoxes = document.querySelectorAll('.color-box');
        colorBoxes.forEach(box => {
            box.addEventListener('click', () => {
                const color = box.getAttribute('data-color');
                canvas.freeDrawingBrush.color = color;
                selectedColor = color;

                colorBoxes.forEach(box => box.classList.remove('active'));
                box.classList.add('active');
            });
        });
        const brushTypeSelect = document.getElementById('brush-type');
        brushTypeSelect.addEventListener('change', (event) => {
            const brushType = event.target.value;

            switch (brushType) {
                case 'pencil':
                    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
                    break;
                case 'spray':
                    canvas.freeDrawingBrush = new fabric.SprayBrush(canvas);
                    break;
                default:
                    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
            }
            canvas.freeDrawingBrush.width = parseInt(document.getElementById('brush-size').value, 10);
        });

        const brushSizeSelect = document.getElementById('brush-size');
        brushSizeSelect.addEventListener('change', (event) => {
            canvas.freeDrawingBrush.width = parseInt(event.target.value, 10);
        });

        // Variables
        let isErasing = false;
        canvas.isDrawingMode = true;
        // Xóa sự kiện cho nút bật/tắt chế độ vẽ
        // const toggleButton = document.getElementById('toggle-drawing');
        // toggleButton.style.display = 'none';
        // Toggle Drawing Mode
        const toggleButton = document.getElementById('toggle-drawing');
        toggleButton.addEventListener('click', () => {
            canvas.isDrawingMode = !canvas.isDrawingMode;
            toggleButton.textContent = canvas.isDrawingMode ? 'Tắt chế độ vẽ' : 'Bật chế độ vẽ';

            if (canvas.isDrawingMode) {
                // Bật chọn đối tượng khi vẽ
                canvas.selection = true;
                canvas.forEachObject((obj) => {
                    obj.selectable = true;  // Cho phép chọn đối tượng
                });
            } else {
                // Tắt chọn đối tượng khi không vẽ
                canvas.selection = false;
                canvas.forEachObject((obj) => {
                    obj.selectable = false; // Ngừng cho phép chọn đối tượng
                });
            }
        });

        // Enable Eraser
        const eraserButton = document.getElementById('eraser');
        eraserButton.addEventListener('click', () => {
            isErasing = !isErasing;
            console.log("isErasing: "+isErasing);
            if (isErasing) {
                canvas.freeDrawingBrush.color = 'rgb(255, 255, 255)'; // Set eraser to white
                canvas.defaultCursor = 'crosshair';
                canvas.isDrawingMode = true;
            }
            else {
                canvas.defaultCursor = 'crosshair';
                canvas.freeDrawingBrush.color = selectedColor; // Restore brush color
            }
        });

        // Fill Color Picker
        const colorPicker = document.getElementById('color-picker');
        colorPicker.addEventListener('input', (event) => {
            selectedColor = event.target.value;
            if (!isErasing) {
                canvas.freeDrawingBrush.color = selectedColor;
            }
        });

                function adjustColorBrightness(color, strength) {
            const rgbValues = color.match(/\d+/g);
            console.log("rgbValues: "+ rgbValues);
            // Tính hệ số điều chỉnh độ sáng
            let factor = (100 + strength) / 100;  // Giảm độ sáng theo phần trăm
            console.log("factor: "+ factor);
            // Điều chỉnh giá trị màu RGB sao cho nó không mất quá nhanh màu sắc
            let r = Math.round(rgbValues[0] * factor);
            let g = Math.round(rgbValues[1] * factor);
            let b = Math.round(rgbValues[2] * factor);

            return `rgb(${r}, ${g}, ${b})`;  // Trả về màu RGB đã thay đổi
        }

        // Cập nhật độ đậm nhạt
        const opacitySlider = document.getElementById('brush-opacity');

        opacitySlider.addEventListener('input', (event) => {
            const brightness = parseFloat(event.target.value);
            console.log("brightness: " +brightness);
            console.log("selectedColor: " +selectedColor);
            const newColor = adjustColorBrightness(selectedColor, brightness); // Làm sáng/tối màu theo độ sáng
            canvas.freeDrawingBrush.color = newColor;
            console.log("newColor: " +newColor);
        });

    </script>
    <script>
            document.getElementById('save-image').addEventListener('click', () => {
                const canvasData = canvas.toDataURL('image/jpg');
                    fetch('/api/ImagesApi/save-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                body: JSON.stringify({ imageData: canvasData, userId: "@userId", status: false, name: "@name", class: "@userClass" })
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert('Hình ảnh đã được lưu thành công');
                    })
                    .catch(error => {
                        console.error('Lỗi khi lưu hình ảnh:', error);
                        alert('Có lỗi xảy ra');
                    });
        });
    </script>
    <script>
            document.getElementById('image-library').addEventListener('click', () => {

            const isConfirmed = window.confirm("Em có muốn trưng bày tác phẩm của mình không?");

            if(isConfirmed){
                const canvasData = canvas.toDataURL('image/jpg');
                    fetch('/api/ImagesApi/image-library', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    body: JSON.stringify({ imageData: canvasData, userId: "@userId", status: true, name: "@name", class: "@userClass" })
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert('Hình ảnh đã được lưu thành công');
                    })
                    .catch(error => {
                        console.error('Lỗi khi lưu hình ảnh:', error);
                        alert('Có lỗi xảy ra');
                    });
            }else{

            }
        });
    </script>
    <script>
        let isDrawingLine = false; // Biến để kiểm tra trạng thái vẽ đường thẳng
        let line, startX, startY;

        const drawLineButton = document.getElementById('draw-line');

                drawLineButton.addEventListener('click', () => {
            isDrawingLine = !isDrawingLine;

            if (isDrawingLine) {
                canvas.isDrawingMode = false;
                drawLineButton.textContent = "Thoát chế độ vẽ đường thẳng";
            } else {
                canvas.isDrawingMode = true;
                drawLineButton.textContent = "Vẽ đường thẳng";
            }
        });

        canvas.on('mouse:down', (event) => {
            if (isDrawingLine) {
                const pointer = canvas.getPointer(event.e);
                startX = pointer.x;
                startY = pointer.y;

                // Tạo đường thẳng tạm thời
                line = new fabric.Line([startX, startY, startX, startY], {
                    stroke: canvas.freeDrawingBrush.color || 'black', // Màu vẽ
                    strokeWidth: canvas.freeDrawingBrush.width || 5, // Độ dày
                    selectable: false, // Không cho phép chọn
                });
                canvas.add(line);
            }
        });

        canvas.on('mouse:move', (event) => {
            if (isDrawingLine && line) {
                const pointer = canvas.getPointer(event.e);
                line.set({ x2: pointer.x, y2: pointer.y }); // Cập nhật điểm cuối
                canvas.renderAll();
            }
        });

        canvas.on('mouse:up', () => {
            if (isDrawingLine && line) {
                line.setCoords(); // Cập nhật tọa độ sau khi vẽ xong
                line = null; // Đặt lại biến
            }
        });

    </script>
    <script>
        const canvasWrapper = document.querySelector('.canvas-wrapper');
        let ctx = canvas.getContext('2d');
        //let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let scale = 1; // Để theo dõi tỷ lệ zoom
        let offsetX = 0;
        let offsetY = 0;

        // Kiểm tra sự tồn tại của canvas trước khi thao tác
        if (canvasWrapper) {
            // Xử lý sự kiện di chuyển và zoom
            let touchStartDistance = 0;
            let touchStartScale = 1;

            canvasWrapper.addEventListener('touchstart', function (e) {
                if (e.touches.length === 2) {
                    // Khi bắt đầu chạm hai ngón tay (zoom)
                    touchStartDistance = getDistance(e.touches);
                    touchStartScale = scale;
                    e.preventDefault();
                } else if (e.touches.length === 1) {
                    // Khi bắt đầu chạm một ngón tay (di chuyển hoặc vẽ)
                    lastX = e.touches[0].clientX;
                    lastY = e.touches[0].clientY;

                    if (canvas.isDrawingMode) {
                        e.preventDefault();
                    } 
                }
            });

            canvasWrapper.addEventListener('touchmove', function (e) {
                if (e.touches.length === 2) {
                    // Xử lý zoom
                    let currentDistance = getDistance(e.touches);
                    scale = touchStartScale * (currentDistance / touchStartDistance);

                    // Cập nhật kích thước canvas theo tỷ lệ mới
                    if (canvasWrapper.style) {
                        canvasWrapper.style.transform = `scale(${scale})`;
                    }
                    e.preventDefault();
                } else if (e.touches.length === 1) {
                    let dx = e.touches[0].clientX - lastX;
                    let dy = e.touches[0].clientY - lastY;

                    if (canvas.isDrawingMode) {
                        e.preventDefault(); // Ngừng di chuyển canvas
                    } else {
                        // Di chuyển canvas khi không vẽ
                        offsetX += dx;
                        offsetY += dy;
                        if (canvasWrapper.style) {
                            canvasWrapper.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${scale})`;
                        }
                        lastX = e.touches[0].clientX;
                        lastY = e.touches[0].clientY;
                        e.preventDefault();
                    }
                }
            });

            // Tính toán khoảng cách giữa hai ngón tay
            function getDistance(touches) {
                let x1 = touches[0].clientX;
                let y1 = touches[0].clientY;
                let x2 = touches[1].clientX;
                let y2 = touches[1].clientY;
                return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            }
        } 

    </script>
    <script>
             // Mảng lưu trạng thái của canvas
        let canvasStates = [];
        let currentStateIndex = -1;

        // Hàm lưu trạng thái hiện tại của canvas
        function saveState() {
            if (currentStateIndex < canvasStates.length - 1) {
                // Xóa các trạng thái redo
                canvasStates = canvasStates.slice(0, currentStateIndex + 1);
            }

            // Lưu trạng thái hiện tại
            canvasStates.push(JSON.stringify(canvas));
            currentStateIndex++;

            console.log("Saved State:", { canvasStates, currentStateIndex }); // Debug log
        }

        // Lưu trạng thái khi canvas có thay đổi
        canvas.on('object:added', saveState);
        canvas.on('object:modified', saveState);
        canvas.on('object:removed', saveState);

        // Hàm "Quay lại" (Undo)
        function undo() {
            if (currentStateIndex > 0) {
                currentStateIndex--; // Lùi về trạng thái trước đó
                const previousState = canvasStates[currentStateIndex];
                canvas.loadFromJSON(previousState, function () {
                    canvas.renderAll();
                });
                console.log("Undo:", { currentStateIndex }); // Debug log
            } else {
                console.log('Không còn trạng thái để quay lại');
            }
        }

        // Gắn sự kiện cho nút "Quay lại" và "Làm lại"
        document.getElementById('undo').addEventListener('click', undo);
        //document.getElementById('redo').addEventListener('click', redo);

        // Lưu trạng thái ban đầu
        saveState();
    </script>
</body>

</html>
